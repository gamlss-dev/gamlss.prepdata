<!-- README.md is generated from README.qmd via: quarto render README.qmd --to gfm -->

```{r}
#| label: setup
#| include: false
knitr::opts_chunk$set(
  collapse = TRUE,
  warning = FALSE,
  message = FALSE,
  comment = "##",
  fig.path = "man/figures/README-",
  fig.width = 12,
  fig.height = 8,
  fig.align = "center",
  dev = "png"
)
```


# gamlss.prepdata: Preparing Data for Distributional Regression

## Overview

The purpose of this package is to streamline the data preparation process for distributional regression models, particularly for use with [`gamlss`](https://cran.R-project.org/package=gamlss) and [`gamlss2`](https://github.com/gamlss-dev/gamlss2) packages. 


Here’s a summary of what can be gained during this early analysis and how it contributes to effective modelling:

1. Understanding the Variables in the Dataset: One of the first steps is to understand the variables in your data. This includes summarizing the data, checking distributions, and identifying the type of each variable (e.g., categorical, continuous).
	
2. Missing Values; Knowing which variables have missing observations and how many observations are missing is important at this stage for decisions have to made on how to deal with the problem and whether we require  data multiple imputations.  

3. Outlier Detection: Outliers can distort the results of a model, so it’s important to detect them early.  Outliers might require special attention, either by excluding them or by applying robust methods that minimize their impact.

4. Examining Associations between the x's:  Associations between variables can be explored using correlation (association) analysis and it important to ease  model fitting and also for interpretation of the results. 


5. Exploring Relationships; How the explanatory variables affect the response i.e.  linearly or not is one aspect of this part of the analysis. The other is the present of interaction. Pairwise interactions can be easilly checked at this stage.     

	
	
6. Variable Transformations;  Variable transformations often has to do with how even the sample points on the variable  are distributed over the range.  Transformation  could improve modelling.

7. Partitioning the Data for Statistical Inference: The dataset can be split into different sets (e.g., training, validation, test) to assess how well a model generalizes and to prevent overfitting.

8. Preliminary Decisions to Modelling Process: The insights gained from a preliminary analysis  could be importany in the  selection of an appropriate statistical or machine learning model.



Conclusion:

The key goal of this pre-modelling analysis of a distributional regression model is to prepare the data in the best possible way so that when you apply modelling techniques like `gamlss` or other regression methods, the process is smooth and the results are reliable. The insights gained in this stage will ensure that the models you fit will be both interpretable and generalizable, giving you the best chance for valid conclusions.

<!-- There is a lot of information which can be gain using a preliminary data -->
<!-- analysis. One could seeking information about the _variables_ in the data set -->
<!-- themselves, on _outliers_, on _associations_  between variables, what  _type_ of -->
<!-- relationships  exist between the response and the explanatory variables (linear -->
<!-- or not linear) and  possible _interactions_ between the explanatory variables.  -->
<!-- In addition, one, at this stage, could  decide  appropriate  _partitions_ of to -->
<!-- maximize statistical inference. While answers to those questions are not -->
<!-- necessarily final, at this pre-modeling stage, they could help at the next -->
<!-- stage of the fitting  process. All functions in the package can be used before -->
<!-- the functions  \texttt{gamlss()} or \texttt{gamlss2()} are used for modeling.  -->

## Installation

The package is not yet on CRAN but can be installed from
[R-universe](https://gamlss-dev.R-universe.dev/).

```{r}
#| label: install
#| eval: false
install.packages("gamlss.prepdata", repos = "https://gamlss-dev.R-universe.dev")
```
For examples using the functions of the package see [`information`](https://mstasinopoulos.github.io/Functions-from-packages/)

## Functions

The functions for manipulation of variables are shown below

| Functions                | Usage                                  |
|:-------------------------|:---------------------------------------|
| `data_dim()`             | Dimensions & % of omitted observations |
| `data_names()`           | Names of the data                      |
| `data_distinct()`        | Distinct values in variables           |
| `data_which(()`          | NA's in variables                      |
| `data_str()`.            | The class of  variables etc.           |
| `data_omit()`            | Omit all the `NA`s                     |
| `data_char2fac()`        | From characters to factors             |
| `data_few2fac()`         | From few distinct obs. to factors      |
| `data_int2num()`         | From integers to  numeric              |
| `data _rm()`             | Remove variables                       |
| `data _rm1val()`         | Remove factors with one level          |
| `data _rename()`         | Rename variables                       |
| `data _remove()`         | Remove variables                       |
| `data _select()`         | Select variables                       |
| `data _exclude_class()`  | Exclude a specified class              |
| `data _only_continous()` | Includes only continuous               |
| `data_rmNAvars()`        | Remove variables with NA values        |
| `data_fac2num()`         | Make factors to numerics               |

The function for graphics are show below

| Functions           | Usage                                                |
|:--------------------|:-----------------------------------------------------|
| `data_plot()`       | Univariate plots of all variables                    |
| `data_xyplot()`     | Pairwise plots of the response against all others    |
| `data_bucket()`     | Bucket plots of all variables                        |
| `data_cor(()`       | Pairwise correlations                                |
| `data_pcor(()`      | Pairwise partial correlations                        |
| `data_void()`       | Pairwise % of empty spaces                           |
| `data_inter()`      | Pairwise interactions                                |
| `data_response()`   | Response variable plots                              |
| `data_zscores()`    | Univariate plots using z-scores                      |
| `data_outliers()`   | Univariate detection of outliers                     |
| `data_leverage()`   | Detection of outliers in the x's  space              |
| `data_scale()`      | Univariate scaling the x's                           |
| `data_Ptrans_plot()` | Checking for univivariate transformations in the x's |


## Graphics


Here some of the  graphical functions examples

```{r}
#| label: packages
#| fig-show: hide
library("gamlss")
library("gamlss2")
library("ggplot2")
library("gamlss.ggplots")
library("gamlss.prepdata")
library("dplyr") 
packageVersion("gamlss.prepdata")
da <- data_rm(rent99, c(2, 9)) 
dim(rent99)
dim(da)
```

## `data_plot()` {#sec-data_plot}

The function `data_plot` plots all the variable of the data individually. It plots;

-   the continuous variable as *histograms* with a density plots superimposed, (see the plots for `rent` and `yearc` below). Alternatively a *dot plots* can be requested, (see the example in @sec-data_xyplot).

-   the integers as *needle* plots, (see the plot for `area` below).

-   the categorical variables, as *bar* plots, (see the plots for `location`, `bath` `kitchen` and `cheating` below).

The message `100 % of data are saved` below is the result of the function `data_cut()` which is use before any `ggplot2` plot.

```{r}
#| label: data_plot
da |> data_plot()
```

The function could saves the `ggplot2` figures.


## `data_xyplot()` {#sec-data_xyplot}

The functions `data_xyplot()` plots the response variable against each of the independent explanatory variables. It plots the continuous against continuous as *scatter* plots and continuous variables against categorical as *box* plot.

::: callout-warning
At the moment there is no provision for categorical response variables.
:::

```{r}
#| label: data_xyplot
da |> data_xyplot(response=rent )
```

The output of the function saves the `ggplot2` figures.

## `data_bucket()` {#sec-data_bucket}

The function `data_bucket` can be used to identifies hight skewness and kurtosis on continuous variables in the data. Note that if the continuous variable is normaly distribueterd looking should be in the center of the figure.

```{r}
#| label: data_bucket
data_bucket(da, response=rent )
```
